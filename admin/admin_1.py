import streamlit as st
from db import update_broadcast, get_broadcast
import base64
import io
import json
import os
import random
import time

st.set_page_config(layout="wide")

SONGS_FOLDER = "songs"
audio_paths = [os.path.join(SONGS_FOLDER, f) for f in os.listdir(SONGS_FOLDER) if f.endswith(".mp3")]
audio_bytes_list = []

st.header("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π")
current_message = get_broadcast()
st.markdown("---")
st.markdown("### üìî –°–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º")
st.text_area("–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤:", value=current_message, height=100, disabled=True)
new_msg = st.text_area("–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", value=current_message)

if st.button("–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"):
    update_broadcast(new_msg)
    st.success("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    st.rerun()
st.markdown("---")
st.markdown("### üìî –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
col1, col2 = st.columns([1,1])
with col1:
    if st.button("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"):
        update_broadcast("–£–≤–∞–∂–∞–µ–º—ã–µ –∏–≥—Ä–æ–∫–∏! \n–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è, –ø—Ä–æ—Å–∏–º –∑–∞–Ω—è—Ç—å –≤–∞—à–∏ –º–µ—Å—Ç–∞.")
        st.success("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        st.rerun()

with col2:
    if st.button("–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É"):
        update_broadcast("–£–≤–∞–∂–∞–µ–º—ã–µ –∏–≥—Ä–æ–∫–∏! \n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É, –¥–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!")
        st.success("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        st.rerun()

def create_full_playlist_player(list_of_audio_paths):
    playlist_data = []
    for path in list_of_audio_paths:
        try:
            with open(path, "rb") as f:
                b64_string = base64.b64encode(f.read()).decode()
                track_title = os.path.basename(path)
                playlist_data.append({
                    "src": f"data:audio/mp3;base64,{b64_string}",
                    "title": track_title
                })
        except FileNotFoundError:
            st.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω: {path}")
            continue 

    if not playlist_data:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–∞.")
        return

    html_code = f"""
    <div style="font-family: sans-serif; border: 1px solid #e0e0e0; border-radius: 10px; padding: 15px; color: white;">
        <h4 style="margin-top: 0; color: white;">–ü–ª–µ–π–ª–∏—Å—Ç</h4>
        <div id="current-track-title" style="font-weight: bold; margin-bottom: 10px; color: white;">-</div>

        <audio id="audio-player"></audio>

        <div style="display: flex; align-items: center; gap: 10px;">
            <button id="prev-btn" style="padding: 8px 12px; color: black;">‚èÆÔ∏è</button>
            <button id="play-pause-btn" style="padding: 8px 12px; min-width: 120px; color: black;">–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏</button>
            <button id="next-btn" style="padding: 8px 12px; color: black;">‚è≠Ô∏è</button>
        </div>
    </div>


    <script>
        const audioPlayer = document.getElementById('audio-player');
        const playPauseBtn = document.getElementById('play-pause-btn');
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        const trackTitle = document.getElementById('current-track-title');

        const playlist = {json.dumps(playlist_data)};
        let currentTrackIndex = 0;

        function loadTrack(index) {{
            if (index >= 0 && index < playlist.length) {{
                audioPlayer.src = playlist[index].src;
                trackTitle.textContent = playlist[index].title;
                currentTrackIndex = index;
            }}
        }}

        function playTrack() {{
            audioPlayer.play();
            playPauseBtn.textContent = '–ü–∞—É–∑–∞';
        }}

        function pauseTrack() {{
            audioPlayer.pause();
            playPauseBtn.textContent = '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏';
        }}

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        playPauseBtn.addEventListener('click', () => {{
            if (audioPlayer.paused) {{
                playTrack();
            }} else {{
                pauseTrack();
            }}
        }});

        nextBtn.addEventListener('click', () => {{
            const nextIndex = (currentTrackIndex + 1) % playlist.length; // –ó–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
            loadTrack(nextIndex);
            playTrack();
        }});

        prevBtn.addEventListener('click', () => {{
            const prevIndex = (currentTrackIndex - 1 + playlist.length) % playlist.length; // –ó–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ
            loadTrack(prevIndex);
            playTrack();
        }});

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
        audioPlayer.addEventListener('ended', () => {{
            nextBtn.click(); // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "Next"
        }});

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        loadTrack(0);
    </script>
    """
    
    # 3. –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ Streamlit
    st.components.v1.html(html_code, height=150)

st.markdown("---")
st.markdown("### –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞")

random.shuffle(audio_paths)

uploaded_files = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ .mp3 —Ñ–∞–π–ª–æ–≤", 
    type=["mp3"], accept_multiple_files=True
)

if uploaded_files:
    for uploaded_file in uploaded_files:
        save_path = os.path.join(SONGS_FOLDER, uploaded_file.name)
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –µ—Å—Ç—å
        with open(save_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
    st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(uploaded_files)} —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫—É '{SONGS_FOLDER}'")
    
create_full_playlist_player(audio_paths)
